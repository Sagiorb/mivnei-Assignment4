import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

abstract public class AbstractSkipList {
    final protected Node head;
    final protected Node tail;

    public AbstractSkipList() {
        head = new Node(Integer.MIN_VALUE);
        tail = new Node(Integer.MAX_VALUE);
        increaseHeight();
    }

    public void increaseHeight() {
        head.addLevel(tail, null);
        tail.addLevel(null, head);
    }

    abstract Node find(int key);

    abstract public int generateHeight();

    public Node search(int key) {
        Node curr = find(key);

        return curr.key() == key ? curr : null;
    }

    public Node insert(int key) {
        int nodeHeight = generateHeight();
        //added
        if(nodeHeight > head.height()) {
            head.setCountArr(nodeHeight);
            tail.setCountArr(nodeHeight);
        }
        
        while (nodeHeight > head.height()) {
            increaseHeight();
        }

        Node prevNode = find(key);
        if (prevNode.key() == key) {
            return null;
        }
        
        Node newNode = new Node(key);
        newNode.setCountArr(nodeHeight);
        //added
        int count=0;
        for (int level = 0; level <= nodeHeight && prevNode != null; ++level) {
            
        	Node nextNode = prevNode.getNext(level);

            newNode.addLevel(nextNode, prevNode);
            prevNode.setNext(level, newNode);
            nextNode.setPrev(level, newNode);
            //added
            newNode.countArr[level]+=count;
            while (prevNode != null && prevNode.height() == level) {
                //added
                count+=prevNode.countArr[level];
                
            	prevNode = prevNode.getPrev(level);

            }
        }
        //added, this is to update count for every node after the added node
        Node updatedNode=newNode.getNext(0);
        for(int level = 0; level <= nodeHeight && prevNode != null; ++level) {
        	updatedNode.countArr[level]=updatedNode.countArr[level]-newNode.countArr[level]+1;
        	while(updatedNode != null&& updatedNode.height==level) {
        		updatedNode=updatedNode.getNext(level);
        	}
        }

        return newNode;
    }

    public boolean delete(Node node) {
        for (int level = 0; level <= node.height(); ++level) {
            Node prev = node.getPrev(level);
            Node next = node.getNext(level);
            
            next.countArr[level]=next.countArr[level]+node.countArr[level]-1;
            		
            prev.setNext(level, next);
            next.setPrev(level, prev);
        }

        return true;
    }

    public int predecessor(Node node) {
        return node.getPrev(0).key();
    }

    public int successor(Node node) {
        return node.getNext(0).key();
    }

    public int minimum() {
        if (head.getNext(0) == tail) {
            throw new NoSuchElementException("Empty Linked-List");
        }

        return head.getNext(0).key();
    }

    public int maximum() {
        if (tail.getPrev(0) == head) {
            throw new NoSuchElementException("Empty Linked-List");
        }

        return tail.getPrev(0).key();
    }

    private void levelToString(StringBuilder s, int level) {
        s.append("H    ");
        Node curr = head.getNext(level);

        while (curr != tail) {
            s.append(curr.key);
            s.append("    ");
        }

        s.append("T\n");
    }

    @Override
    public String toString() {
        StringBuilder str = new StringBuilder();

        for (int level = head.height(); level >= 0; --level) {
            levelToString(str, level);
        }

        return str.toString();
    }

    public static class Node {
        final private List<Node> next;
        final private List<Node> prev;
        private int height;
        final private int key;
        private int[] countArr;

        public Node(int key) {
            next = new ArrayList<>();
            prev = new ArrayList<>();
            this.height = -1;
            this.key = key;
            countArr = new int[1];
        }

        public Node getPrev(int level) {
            if (level > height) {
                throw new IllegalStateException("Fetching height higher than current node height");
            }

            return prev.get(level);
        }

        public Node getNext(int level) {
            if (level > height) {
                throw new IllegalStateException("Fetching height higher than current node height");
            }

            return next.get(level);
        }

        public void setNext(int level, Node next) {
            if (level > height) {
                throw new IllegalStateException("Fetching height higher than current node height");
            }

            this.next.set(level, next);
        }

        public void setPrev(int level, Node prev) {
            if (level > height) {
                throw new IllegalStateException("Fetching height higher than current node height");
            }

            this.prev.set(level, prev);
        }

        public void addLevel(Node next, Node prev) {
            ++height;
            this.next.add(next);
            this.prev.add(prev);
            
        }

        //added
        public int[] getCountArr() {
        	return countArr;
        }
        public int height() { return height; }
        public int key() { return key; }
        public void setCountArr(int length) {
        	countArr=new int[length+1];
        	for(int i = 0;i<=length;i++) {
        		countArr[i]=1;
        	}
        }
    }
}
